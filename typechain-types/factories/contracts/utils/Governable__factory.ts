/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Governable,
  GovernableInterface,
} from "../../../contracts/utils/Governable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "governance_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "GovernanceLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "pendingGovernance",
        type: "address",
      },
    ],
    name: "GovernancePending",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldGovernance",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newGovernance",
        type: "address",
      },
    ],
    name: "GovernanceTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceIsLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingGovernance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pendingGovernance_",
        type: "address",
      },
    ],
    name: "setPendingGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000cf538038062000cf58339818101604052810190620000379190620001b8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a1906200024b565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908315150217905550506200026d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001808262000153565b9050919050565b620001928162000173565b81146200019e57600080fd5b50565b600081519050620001b28162000187565b92915050565b600060208284031215620001d157620001d06200014e565b5b6000620001e184828501620001a1565b91505092915050565b600082825260208201905092915050565b7f7a65726f206164647265737320676f7665726e616e6365000000000000000000600082015250565b600062000233601783620001ea565b91506200024082620001fb565b602082019050919050565b60006020820190508181036000830152620002668162000224565b9050919050565b610a78806200027d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630abb6035146100675780631c93022114610083578063238efcbc146100a15780635aa6e675146100ab578063abbf4b17146100c9578063f39c38a0146100d3575b600080fd5b610081600480360381019061007c91906107cb565b6100f1565b005b61008b61024a565b6040516100989190610813565b60405180910390f35b6100a9610261565b005b6100b36104f9565b6040516100c0919061083d565b60405180910390f35b6100d1610522565b005b6100db61073e565b6040516100e8919061083d565b60405180910390f35b600160149054906101000a900460ff1615610141576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610138906108b5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c690610921565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd61ed858909d3cb796547804c47dc1550d27455f8a0037b6b487e462123923968160405161023f919061083d565b60405180910390a150565b6000600160149054906101000a900460ff16905090565b600160149054906101000a900460ff16156102b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a8906108b5565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610341576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061098d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ca906109f9565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce808160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516104ee929190610a19565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160149054906101000a900460ff1615610572576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610569906108b5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f790610921565b60405180910390fd5b60018060146101000a81548160ff02191690831515021790555073ffffffffffffffffffffffffffffffffffffffff6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ffffffffffffffffffffffffffffffffffffffff600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce803373ffffffffffffffffffffffffffffffffffffffff604051610708929190610a19565b60405180910390a17fd572292b9e5d684b0719ae2d0e210513b477e303c975ed1c63b6fcac1607672760405160405180910390a1565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107988261076d565b9050919050565b6107a88161078d565b81146107b357600080fd5b50565b6000813590506107c58161079f565b92915050565b6000602082840312156107e1576107e0610768565b5b60006107ef848285016107b6565b91505092915050565b60008115159050919050565b61080d816107f8565b82525050565b60006020820190506108286000830184610804565b92915050565b6108378161078d565b82525050565b6000602082019050610852600083018461082e565b92915050565b600082825260208201905092915050565b7f676f7665726e616e6365206c6f636b6564000000000000000000000000000000600082015250565b600061089f601183610858565b91506108aa82610869565b602082019050919050565b600060208201905081810360008301526108ce81610892565b9050919050565b7f21676f7665726e616e6365000000000000000000000000000000000000000000600082015250565b600061090b600b83610858565b9150610916826108d5565b602082019050919050565b6000602082019050818103600083015261093a816108fe565b9050919050565b7f2170656e64696e6720676f7665726e616e636500000000000000000000000000600082015250565b6000610977601383610858565b915061098282610941565b602082019050919050565b600060208201905081810360008301526109a68161096a565b9050919050565b7f7a65726f20676f7665726e616e63650000000000000000000000000000000000600082015250565b60006109e3600f83610858565b91506109ee826109ad565b602082019050919050565b60006020820190508181036000830152610a12816109d6565b9050919050565b6000604082019050610a2e600083018561082e565b610a3b602083018461082e565b939250505056fea2646970667358221220b004608126b14ffe4c1dc62d108af742275c9b06a9203b529e227506dd51ff1464736f6c63430008090033";

type GovernableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Governable__factory extends ContractFactory {
  constructor(...args: GovernableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    governance_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Governable> {
    return super.deploy(governance_, overrides || {}) as Promise<Governable>;
  }
  override getDeployTransaction(
    governance_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(governance_, overrides || {});
  }
  override attach(address: string): Governable {
    return super.attach(address) as Governable;
  }
  override connect(signer: Signer): Governable__factory {
    return super.connect(signer) as Governable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernableInterface {
    return new utils.Interface(_abi) as GovernableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Governable {
    return new Contract(address, _abi, signerOrProvider) as Governable;
  }
}
