/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CoverageDataProviderWrapperInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "addCaller(address)": FunctionFragment;
    "addReceiver(uint64,address)": FunctionFragment;
    "callerAt(uint256)": FunctionFragment;
    "coverageDataProvider()": FunctionFragment;
    "executeMessage(address,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferRefund(address,uint256,bytes,address)": FunctionFragment;
    "governance()": FunctionFragment;
    "governanceIsLocked()": FunctionFragment;
    "lockGovernance()": FunctionFragment;
    "messageBus()": FunctionFragment;
    "nonce()": FunctionFragment;
    "numsOfCaller()": FunctionFragment;
    "numsOfReceiver()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "receiverAt(uint256)": FunctionFragment;
    "remove(string[])": FunctionFragment;
    "removeReceiver(uint256)": FunctionFragment;
    "set(string[],uint256[])": FunctionFragment;
    "setMessageBus(address)": FunctionFragment;
    "setPendingGovernance(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernance"
      | "addCaller"
      | "addReceiver"
      | "callerAt"
      | "coverageDataProvider"
      | "executeMessage"
      | "executeMessageWithTransfer"
      | "executeMessageWithTransferFallback"
      | "executeMessageWithTransferRefund"
      | "governance"
      | "governanceIsLocked"
      | "lockGovernance"
      | "messageBus"
      | "nonce"
      | "numsOfCaller"
      | "numsOfReceiver"
      | "owner"
      | "pendingGovernance"
      | "receiverAt"
      | "remove"
      | "removeReceiver"
      | "set"
      | "setMessageBus"
      | "setPendingGovernance"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addCaller", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addReceiver",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "callerAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coverageDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransfer",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferFallback",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefund",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceIsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageBus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numsOfCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numsOfReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiverAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "remove", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "removeReceiver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageBus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCaller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callerAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coverageDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceIsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageBus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numsOfCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numsOfReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiverAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMessageBus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "GovernanceLocked()": EventFragment;
    "GovernancePending(address)": EventFragment;
    "GovernanceTransferred(address,address)": EventFragment;
    "MessageBusUpdated(address)": EventFragment;
    "MessageReceived(address,uint64,uint64,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceiverRemoved(uint64)": EventFragment;
    "ReceiverSet(uint64,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernancePending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageBusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiverRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiverSet"): EventFragment;
}

export interface GovernanceLockedEventObject {}
export type GovernanceLockedEvent = TypedEvent<[], GovernanceLockedEventObject>;

export type GovernanceLockedEventFilter =
  TypedEventFilter<GovernanceLockedEvent>;

export interface GovernancePendingEventObject {
  pendingGovernance: string;
}
export type GovernancePendingEvent = TypedEvent<
  [string],
  GovernancePendingEventObject
>;

export type GovernancePendingEventFilter =
  TypedEventFilter<GovernancePendingEvent>;

export interface GovernanceTransferredEventObject {
  oldGovernance: string;
  newGovernance: string;
}
export type GovernanceTransferredEvent = TypedEvent<
  [string, string],
  GovernanceTransferredEventObject
>;

export type GovernanceTransferredEventFilter =
  TypedEventFilter<GovernanceTransferredEvent>;

export interface MessageBusUpdatedEventObject {
  messageBus: string;
}
export type MessageBusUpdatedEvent = TypedEvent<
  [string],
  MessageBusUpdatedEventObject
>;

export type MessageBusUpdatedEventFilter =
  TypedEventFilter<MessageBusUpdatedEvent>;

export interface MessageReceivedEventObject {
  sender: string;
  srcChainId: BigNumber;
  nonce: BigNumber;
  message: string;
}
export type MessageReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  MessageReceivedEventObject
>;

export type MessageReceivedEventFilter = TypedEventFilter<MessageReceivedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceiverRemovedEventObject {
  chainId: BigNumber;
}
export type ReceiverRemovedEvent = TypedEvent<
  [BigNumber],
  ReceiverRemovedEventObject
>;

export type ReceiverRemovedEventFilter = TypedEventFilter<ReceiverRemovedEvent>;

export interface ReceiverSetEventObject {
  chainId: BigNumber;
  dst: string;
}
export type ReceiverSetEvent = TypedEvent<
  [BigNumber, string],
  ReceiverSetEventObject
>;

export type ReceiverSetEventFilter = TypedEventFilter<ReceiverSetEvent>;

export interface CoverageDataProviderWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoverageDataProviderWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReceiver(
      chainId: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callerAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { caller: string }>;

    coverageDataProvider(overrides?: CallOverrides): Promise<[string]>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    governanceIsLocked(overrides?: CallOverrides): Promise<[boolean]>;

    lockGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    messageBus(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    numsOfCaller(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    numsOfReceiver(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    receiverAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { chainId: BigNumber; dst: string }>;

    remove(
      _uwpNames: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeReceiver(
      receiverIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      _uwpNames: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCaller(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReceiver(
    chainId: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callerAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  coverageDataProvider(overrides?: CallOverrides): Promise<string>;

  executeMessage(
    _sender: string,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    arg3: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransfer(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferFallback(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefund(
    _token: string,
    _amount: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  governanceIsLocked(overrides?: CallOverrides): Promise<boolean>;

  lockGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  messageBus(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  numsOfCaller(overrides?: CallOverrides): Promise<BigNumber>;

  numsOfReceiver(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  receiverAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { chainId: BigNumber; dst: string }>;

  remove(
    _uwpNames: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeReceiver(
    receiverIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    _uwpNames: string[],
    _amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessageBus(
    _messageBus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernance(
    pendingGovernance_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    addCaller(_caller: string, overrides?: CallOverrides): Promise<void>;

    addReceiver(
      chainId: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    callerAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    coverageDataProvider(overrides?: CallOverrides): Promise<string>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    governance(overrides?: CallOverrides): Promise<string>;

    governanceIsLocked(overrides?: CallOverrides): Promise<boolean>;

    lockGovernance(overrides?: CallOverrides): Promise<void>;

    messageBus(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    numsOfCaller(overrides?: CallOverrides): Promise<BigNumber>;

    numsOfReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    receiverAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { chainId: BigNumber; dst: string }>;

    remove(_uwpNames: string[], overrides?: CallOverrides): Promise<void>;

    removeReceiver(
      receiverIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set(
      _uwpNames: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageBus(
      _messageBus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernanceLocked()"(): GovernanceLockedEventFilter;
    GovernanceLocked(): GovernanceLockedEventFilter;

    "GovernancePending(address)"(
      pendingGovernance?: null
    ): GovernancePendingEventFilter;
    GovernancePending(pendingGovernance?: null): GovernancePendingEventFilter;

    "GovernanceTransferred(address,address)"(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceTransferredEventFilter;
    GovernanceTransferred(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceTransferredEventFilter;

    "MessageBusUpdated(address)"(
      messageBus?: null
    ): MessageBusUpdatedEventFilter;
    MessageBusUpdated(messageBus?: null): MessageBusUpdatedEventFilter;

    "MessageReceived(address,uint64,uint64,bytes)"(
      sender?: null,
      srcChainId?: null,
      nonce?: null,
      message?: null
    ): MessageReceivedEventFilter;
    MessageReceived(
      sender?: null,
      srcChainId?: null,
      nonce?: null,
      message?: null
    ): MessageReceivedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReceiverRemoved(uint64)"(chainId?: null): ReceiverRemovedEventFilter;
    ReceiverRemoved(chainId?: null): ReceiverRemovedEventFilter;

    "ReceiverSet(uint64,address)"(
      chainId?: null,
      dst?: null
    ): ReceiverSetEventFilter;
    ReceiverSet(chainId?: null, dst?: null): ReceiverSetEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReceiver(
      chainId: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callerAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coverageDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    governanceIsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    lockGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    messageBus(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    numsOfCaller(overrides?: CallOverrides): Promise<BigNumber>;

    numsOfReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    receiverAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(
      _uwpNames: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeReceiver(
      receiverIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      _uwpNames: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReceiver(
      chainId: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callerAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coverageDataProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceIsLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    messageBus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numsOfCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numsOfReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiverAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      _uwpNames: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeReceiver(
      receiverIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _uwpNames: string[],
      _amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
