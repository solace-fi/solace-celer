/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "CoverageDataProviderWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoverageDataProviderWrapper__factory>;
    getContractFactory(
      name: "ICoverageDataProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoverageDataProviderV2__factory>;
    getContractFactory(
      name: "IGovernable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernable__factory>;
    getContractFactory(
      name: "Governable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governable__factory>;
    getContractFactory(
      name: "MultichainWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultichainWrapper__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IOriginalTokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOriginalTokenVault__factory>;
    getContractFactory(
      name: "IOriginalTokenVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOriginalTokenVaultV2__factory>;
    getContractFactory(
      name: "IPeggedTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeggedTokenBridge__factory>;
    getContractFactory(
      name: "IPeggedTokenBridgeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeggedTokenBridgeV2__factory>;
    getContractFactory(
      name: "ISigsVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISigsVerifier__factory>;
    getContractFactory(
      name: "MessageBusAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBusAddress__factory>;
    getContractFactory(
      name: "MessageReceiverApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiverApp__factory>;
    getContractFactory(
      name: "MessageSenderApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageSenderApp__factory>;
    getContractFactory(
      name: "IMessageBus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageBus__factory>;
    getContractFactory(
      name: "IMessageReceiverApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageReceiverApp__factory>;
    getContractFactory(
      name: "MessageBus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBus__factory>;
    getContractFactory(
      name: "MessageBusReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBusReceiver__factory>;
    getContractFactory(
      name: "MessageBusSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBusSender__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "CoverageDataProviderWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoverageDataProviderWrapper>;
    getContractAt(
      name: "ICoverageDataProviderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoverageDataProviderV2>;
    getContractAt(
      name: "IGovernable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernable>;
    getContractAt(
      name: "Governable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governable>;
    getContractAt(
      name: "MultichainWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultichainWrapper>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IOriginalTokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOriginalTokenVault>;
    getContractAt(
      name: "IOriginalTokenVaultV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOriginalTokenVaultV2>;
    getContractAt(
      name: "IPeggedTokenBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeggedTokenBridge>;
    getContractAt(
      name: "IPeggedTokenBridgeV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeggedTokenBridgeV2>;
    getContractAt(
      name: "ISigsVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISigsVerifier>;
    getContractAt(
      name: "MessageBusAddress",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBusAddress>;
    getContractAt(
      name: "MessageReceiverApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiverApp>;
    getContractAt(
      name: "MessageSenderApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageSenderApp>;
    getContractAt(
      name: "IMessageBus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageBus>;
    getContractAt(
      name: "IMessageReceiverApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageReceiverApp>;
    getContractAt(
      name: "MessageBus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBus>;
    getContractAt(
      name: "MessageBusReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBusReceiver>;
    getContractAt(
      name: "MessageBusSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBusSender>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
